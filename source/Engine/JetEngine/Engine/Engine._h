/****************************************************************************************/
/*  ENGINE._H                                                                           */
/*                                                                                      */
/*  Author:                                                                             */
/*  Description:                                                                        */
/*                                                                                      */
/*  The contents of this file are subject to the Jet3D Public License                   */
/*  Version 1.02 (the "License"); you may not use this file except in                   */
/*  compliance with the License. You may obtain a copy of the License at                */
/*  http://www.jet3d.com                                                                */
/*                                                                                      */
/*  Software distributed under the License is distributed on an "AS IS"                 */
/*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See                */
/*  the License for the specific language governing rights and limitations              */
/*  under the License.                                                                  */
/*                                                                                      */
/*  The Original Code is Jet3D, released December 12, 1999.                             */
/*  Copyright (C) 1996-1999 Eclipse Entertainment, L.L.C. All Rights Reserved           */
/*                                                                                      */
/****************************************************************************************/
#ifndef JE_ENGINE_PRIVATE_H
#define JE_ENGINE_PRIVATE_H

#include <stdlib.h>
#include <string>

#include "Engine.h"
#include "Bitmap.h"
#include "BitmapList.h"
#include "Dcommon.h"
#include "jeChain.h"
#include "jeFileLogger.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WINVER
typedef double LONGLONG;
typedef struct  _LARGE_INTEGER
    {
    LONGLONG QuadPart;
} LARGE_INTEGER;
#endif

//=====================================================================================
//	Structure defines
//=====================================================================================

#define	MAX_SUB_DRIVERS			32
#define	MAX_DRIVER_MODES		64

#define MAX_CLIENT_STRING_LEN	256
#define MAX_CLIENT_STRINGS		256

typedef struct 
{
	int32			x,y;
	char			String[MAX_CLIENT_STRING_LEN];
	int32 size;
	//int32 r,g,b;
	uint32			Color;	
	jeFont			*Font;
}	Engine_String;

typedef struct
{
	jeBitmap		*FontBitmap;
	jeFont			*Font;
	
	uint32			FontLUT1[256];
	Engine_String	ClientStrings[MAX_CLIENT_STRINGS];
	int32			NumStrings;

	int32			NumDebugStrings;
} Engine_FontInfo;

typedef struct jeDriver_Mode
{
	int32			Id;							// Driver assigned mode id
	char			Name[512];					// Driver assigned mode name
	int32			Width,Height,Bpp;
} jeDriver_Mode;

typedef struct jeDriver
{
	int32			Id;							// Driver assigned Id
	char			Name[512];					// Driver assigned name
	char			FileName[256];				// FileName of driver
	DRV_Hook *		HookProc;					// Function pointer to hook, if not a DLL

	jeDriver_Mode	Modes[MAX_DRIVER_MODES];	// Modes for this driver
	int32			NumModes;					// Num modes for this driver

} jeDriver;

typedef struct
{
	// Info the enuming fills in
	jeDriver		SubDrivers[MAX_SUB_DRIVERS];
	int32			NumSubDrivers;
	char			CurFileName[_MAX_PATH];
	DRV_Hook *		CurHookProc;

	//	Data for current driver
	int32			DriverHandle;		// CurrentDriver Handle (for DLL)
	
	jeDriver		*CurDriver;			// Current driver
	jeDriver_Mode	*CurMode;			// Current mode
	DRV_Driver		*RDriver;			// Current driver function hook
										// ->RDriver doubles as Active boolean
} Engine_DriverInfo;

typedef struct
{
	int32			TraversedPolys;		// Total Polys traversed
	int32			SentPolys;			// Total Polys sent to driver
	int32			RenderedPolys;		// Total Rendered polys reported by driver

	int32			NumModels;
	int32			NumMirrors;
#ifdef	MESHES
	int32			NumMeshes;
#endif
	int32			NumActors;
	int32			NumDLights;
	int32			NumFog;
	int32			LMap1;				// Lmaps gone through first pass (reg light)
	int32			LMap2;				// LMaps gone through 2nd pass (fog)
} Engine_DebugInfo;

//{} Hack:

typedef struct BitmapList BitmapList;

// System globals initialized by module it belongs to...
struct jeEngine
{
	int32				RefCount;

	jeEngine			* MySelf1;

	jet3d::jeFileLogger	*EngineLog;

	//	System info
	Engine_DriverInfo	DriverInfo;			// Info about current driver (this should be enumed)
	jeChain				*ChangeDriverCBChain;

	Engine_DebugInfo	DebugInfo;

	float				Fps;
	LARGE_INTEGER		CurrentTic;
	Engine_FontInfo		FontInfo;
	HWND				hWnd;

	//char				AppName[200];
	std::string			AppName;

	//	Global LUT's
	int16				WaveTable[20];		// Global Wave table (for wavy effects, pumping, etc)
	int16				WaveDir[20];

	// Light module info
	uint8				StyleLUT1[64][256];	// Style intensity table (StyleLUT1[Intensity][Number]);

	jeBoolean			Changed;			// == JE_TRUE if needs to be updated with Driver

	jeBoolean			DisplayFrameRateCounter; // Whether or not to display the FPS string

	//char				*DriverDirectory;	// Path to load driver DLLs from
	std::string			DriverDirectory;

	BitmapList			*AttachedBitmaps;

	float				CurrentGamma;
	float				BitmapGamma;

	jeEngine_FrameState	FrameState;

	uint32				DefaultRenderFlags;

	jeBoolean			SplashDisplayed;	// Have we already done the splash screen?

	int32				RenderMode;

	jeEngine			* MySelf2;
};

#ifdef __cplusplus
}
#endif

#endif // JE_ENGINE_H

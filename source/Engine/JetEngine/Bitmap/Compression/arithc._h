/****************************************************************************************/
/*  ARITHC._H                                                                           */
/*                                                                                      */
/*  Author:                                                                             */
/*  Description:                                                                        */
/*                                                                                      */
/*  The contents of this file are subject to the Jet3D Public License                   */
/*  Version 1.02 (the "License"); you may not use this file except in                   */
/*  compliance with the License. You may obtain a copy of the License at                */
/*  http://www.jet3d.com                                                                */
/*                                                                                      */
/*  Software distributed under the License is distributed on an "AS IS"                 */
/*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See                */
/*  the License for the specific language governing rights and limitations              */
/*  under the License.                                                                  */
/*                                                                                      */
/*  The Original Code is Jet3D, released December 12, 1999.                             */
/*  Copyright (C) 1996-1999 Eclipse Entertainment, L.L.C. All Rights Reserved           */
/*                                                                                      */
/****************************************************************************************/
#ifndef ARITHC_INTERNAL_H
#define ARITHC_INTERNAL_H

#include "arithc.h"

// #define PARANOID_ENCODEDONE	// ?

// #define FAST_ENCODE
	/** actually makes very little difference in speed or compression
	*	presumably because the Pentium's branch prediction is doing
	*	a good job
	**/

/*consts*/
#define CODE_BITS		31
#define SHIFT_BITS		(CODE_BITS - 8)
#define CODE_BYTES		((CODE_BITS+7)/8)

#define PRECISION_BITS	9		// coding is done to this accuracy (in terms of range>>PRECISION_BITS)

#define MinRange 		((uint32)1<<SHIFT_BITS)
#define One   			((uint32)1<<CODE_BITS)
#define CumProbMax  	(MinRange>>PRECISION_BITS)
#define CODE_MASK		(One - 1)

#define QUEUE_INIT_VAL	0x1C

#define EXTRA_BITS		((CODE_BITS-1) % 8 + 1)		// == 7	== CODE_BITS - (8*(CODE_BYTES-1))
#define TAIL_EXTRA_BITS	(8 - EXTRA_BITS)			// == 1

	// extra_bits are the bits in "code" that don't quite fit in bytes

#endif // ARITHC_INTERNAL_H


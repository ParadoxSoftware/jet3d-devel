/****************************************************************************************/
/*  Bitmap.__h                                                                          */
/*                                                                                      */
/*  Author: Charles Bloom                                                               */
/*  Description:  Bitmap*.c Internal Header (contains the Bitmap Struct)                */
/*                                                                                      */
/*  The contents of this file are subject to the Jet3D Public License                   */
/*  Version 1.02 (the "License"); you may not use this file except in                   */
/*  compliance with the License. You may obtain a copy of the License at                */
/*  http://www.jet3d.com                                                                */
/*                                                                                      */
/*  Software distributed under the License is distributed on an "AS IS"                 */
/*  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See                */
/*  the License for the specific language governing rights and limitations              */
/*  under the License.                                                                  */
/*                                                                                      */
/*  The Original Code is Jet3D, released December 12, 1999.                             */
/*  Copyright (C) 1996-1999 Eclipse Entertainment, L.L.C. All Rights Reserved           */
/*                                                                                      */
/****************************************************************************************/
#ifndef JE_BITMAP____H
#define JE_BITMAP____H

#include "Bitmap.h"
#include "Bitmap._h"
#include "Wavelet.h"
#include "ThreadQueue.h"

// Hey ! 
// this is bitmap.__h : for inclusion by bitmap friends ONLY!
//	included by bitmap.c , bitmap_blitdata.c

/*}{ *********** the bitmap type *******************/

// the Version Major indicates an incompatibility

#define JEBM_VERSION_MAJOR		(0x0004)
#define JEBM_VERSION_MINOR		(0x0002)

	// version major 4 :
	// version minor 1 stored palettes in the hints
	// version minor 2 send the average color with the bitmaps

#define	MAXMIPLEVELS			(8)

#define PALETTE_FORMAT_DEFAULT	(JE_PIXELFORMAT_24BIT_RGB)

#define ALPHA_TO_TRANSPARENCY_THRESHOLD		(80)

struct jeBitmap_Palette
{
	int32			LockCount,RefCount;
	jePixelFormat	Format;
	int32			Size;
	jeBoolean		HasColorKey;
	uint32			ColorKey;		// the color which is the colorkey
	int32			ColorKeyIndex;	// the palette index which is the color;
									// Bitmap->CK == Bitmap->Pal->CK_Index

	// we have EITHER Data or DriverHandle
	void			*Data;		//Size * BytesPerPixel(Format)
	DRV_Driver		*Driver;
	jeTexture		*DriverHandle;
	void			*DriverBits;	//only non-null inside a Lock/UnLock
};

typedef struct jeBitmap
{
	int32 				RefCount;
	jeBitmap_Info		Info;
	void *				Data[MAXMIPLEVELS];
	jeBoolean			Modified[MAXMIPLEVELS];
							// modified tells whether a mip != a scaledown of mip 0
							// modified[0] is ignored
	jeBitmap *			Alpha;

	int32				LockCount;	// -Nmips for 'write' , > 0 for 'read's
	jeBitmap *			LockOwner;	// this points to our owner and doubles as boolean 'islocked'
	jeBitmap *			DataOwner;	// if this is set, then my Data is not mine to free

	jePixelFormat		PreferredFormat;	// user's favorite
	int32				SeekMipCount;		// when we attach to driver, ask for this many mips

		// must support any number of locks for read
		// a lock for read can be a pointer to my raw bits, or a whole different bitmap

	jeBitmap_Info		DriverInfo;			// all the driver mess..
	uint32				DriverFlags;
	DRV_Driver *		Driver;
	jeTexture *	DriverHandle;
	int32				DriverMipBase;
	int32				DriverMipLock;		// which mip to lock on GetBits
	jeBoolean			DriverBitsLocked;
	jeBoolean			DriverDataChanged;	// relative to system copy
	jeFloat				DriverGamma;
	jeFloat				DriverGammaLast;
	jeBoolean			DriverGammaSet;

	jeWavelet *			Wavelet;
	int32				WaveletMipLock;
		// if Format == Wavelet, this is valid and Data & Alpha are NULL
		//  otherwise it is NULL
	jeBoolean			HasWaveletOptions;
	jeWavelet_Options	WaveletOptions;
	jeBitmap_StreamingStatus StreamingStatus;
	jeBoolean			StreamingTHandle;

	jeBoolean			HasAverageColor;
	uint32				AverageR,AverageG,AverageB;

	jeBoolean			Persistable;
	const jeVFile *		PersistBaseFS;
	char				PersistName[1024];
} jeBitmap;


/*}{ ************* internal protos *****************/

//jeBitmap * jeBitmap_CreateXerox(jeBitmap *BmpSrc);

jeBoolean jeBitmap_IsValid(const jeBitmap *Bmp);
jeBoolean jeBitmap_Info_IsValid(const jeBitmap_Info *Info);
jeBoolean jeBitmap_Palette_IsValid(const jeBitmap_Palette *Pal);

jeBoolean jeBitmap_BlitMipRect(const jeBitmap * Src, int32 SrcMip, int32 SrcX,int32 SrcY,
									 jeBitmap * Dst, int32 DstMip, int32 DstX,int32 DstY,
							int32 SizeX,int32 SizeY);

jeBitmap * jeBitmap_CreateLock_CopyInfo(jeBitmap *BmpSrc,int32 LockCnt,int32 mip);
jeBitmap * jeBitmap_CreateLockFromMip(jeBitmap *Src,int32 mip,
	jePixelFormat Format,jeBoolean HasColorKey,uint32 ColorKey,int32 LockCnt);
jeBitmap * jeBitmap_CreateLockFromMipSystem(jeBitmap *Src,int32 mip,int32 LockCnt);
jeBitmap * jeBitmap_CreateLockFromMipOnDriver(jeBitmap *Src,int32 mip,int32 LockCnt);

jeBoolean jeBitmap_UnLock_NoChange(jeBitmap *Bmp);
jeBoolean jeBitmap_UnLockArray_NoChange(jeBitmap **Locks,int32 Size);

jeBoolean jeBitmap_Update_SystemToDriver(jeBitmap *Bmp);
jeBoolean jeBitmap_Update_DriverToSystem(jeBitmap *Bmp);

jeBoolean jeBitmap_MakeSystemMips(jeBitmap *Bmp,int32 low,int32 high);
jeBoolean jeBitmap_UpdateMips_Data(	jeBitmap_Info * FmInfo,void * FmBits,
									jeBitmap_Info * ToInfo,void * ToBits);
jeBoolean jeBitmap_UpdateMips_System(jeBitmap *Bmp,int32 fm,int32 to);

jeBoolean jeBitmap_UsesColorKey(const jeBitmap * Bmp);

void	  jeBitmap_MakeMipInfo(  jeBitmap_Info *Src,int32 mip,jeBitmap_Info *Into);
jeBoolean jeBitmap_MakeDriverLockInfo(jeBitmap *Bmp,int32 mip,jeBitmap_Info *Into);
					// MakeDriverLockInfo also doesn't full out the full info, so it must be a valid info first!
					// Bmp also gets some crap written into him.

jeBoolean jeBitmap_AllocSystemMip(jeBitmap *Bmp,int32 mip);
jeBoolean jeBitmap_AllocPalette(jeBitmap *Bmp,jePixelFormat Format,DRV_Driver * Driver);

jeBoolean jeBitmap_ReadInfo( jeBitmap *Bmp,jeVFile * F);
jeBoolean jeBitmap_WriteInfo(const jeBitmap *Bmp,jeVFile * F);

jeBoolean jeBitmap_WaitForUnLock(const jeBitmap *Bmp);
jeBoolean jeBitmap_WaitReady(const jeBitmap *Bmp);
jeBoolean jeBitmap_PeekReady(const jeBitmap *Bmp);

jeBoolean			jeBitmap_FixDriverFlags(uint32 *pFlags);

/*}{ ************* end *****************/

#endif
